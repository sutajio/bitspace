<%= render :partial => 'header' %>

<div class="container_12 clearfix">
  <div class="grid_8 suffix_1">

    <h2>Upload API</h2>
    <p>There are two ways to upload music using to Bitspace using the Upload API.
      Either you can upload the files yourself using an upload session, which is
      what you would use if uploading files from your local computer. The other
      alternative is to let Bitspace import the file directly from a publicly accessible
      URL, which is useful if you for example have a website or blog with downloadable
      music and you want to add an "Import to Bitspace" button.</p>
    
    <h2>Creating a new upload session</h2>
    <p>Before you can begin uploading anything you need to create an upload session.
      An upload session defines the URL endpoint to where you will be POST-ing the file
      and parameters that you need to pass along in order for your uploaded file to
      be accepted. Example with Curl:</p>
    
    <pre><code>curl -u username:password <%= new_upload_url %></code></pre>
    
    <p>The response will be a JSON document that will look something like this:</p>
    
    <pre><code>{
"url":"http://.../",
"file_param":"file",
"params":{...}
}</code></pre>

    <p>An upload session will only be valid for a limited amount of time. Currently
      that time is set rather high, but it is still recommended that you request
      a new upload session each time your application or tool starts. If uploads
      start to fail your application should be able to automatically discard the
      upload session it is using and generate a new.</p>

    <h2>Uploading a track</h2>

    <p>To upload a file you will use the information from the upload session.
      The "url" key contains the URL that you should POST the file to. The
      "file_param" key contains the name of key that you should send the file
      data as. The "params" key contains a hash with key/value pairs that should
      be sent together with the key specified in file_param. You do not need to
      authenticate upload requests, as the values in the params hash contains all
      the necessary details to authenticate the request.</p>
    
    <pre><code>&lt;html&gt; 
&lt;head&gt;
  &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot; /&gt;
&lt;/head&gt;

&lt;body&gt; 
  &lt;form action=&quot;&lt;%= upload_session[&#x27;url&#x27;] %&gt;&quot; method=&quot;post&quot;
      enctype=&quot;multipart/form-data&quot;&gt;
    &lt;% upload_session[&#x27;params&#x27;].each do |key,value| %&gt;
      &lt;input type=&quot;hidden&quot; name=&quot;&lt;%= key %&gt;&quot; value=&quot;&lt;%= value %&gt;&quot;&gt;
    &lt;% end %&gt;
    &lt;input name=&quot;&lt;%= upload_session[&#x27;file_param&#x27;] %&gt;&quot; type=&quot;file&quot;&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Upload File&quot;&gt; 
  &lt;/form&gt; 
&lt;/body&gt;
&lt;/html&gt;</code></pre>
    
    <p>The example above show a simple HTML form built using the information
      from the upload session (the syntax is Ruby/Erb, i.e. Rails syntax).
      The result of submitting the above form will be a multipart/form-data
      HTTP POST request containing the file data and the necessary fields
      required to authenticate the upload.</p>
    
    <p>If the authentication fails or if the upload fails for some other reason
      a standard HTTP error will be returned. It is important to note that you
      need to submit the request using UTF-8 encoding.</p>
    
    <h2>After the upload has finished</h2>
    <p>When the upload has finished you need to manually notify Bitspace that
      the file has been uploaded and need to be processed. Example with Curl:</p>
    
    <pre><code>curl -u username:password -d "upload[key]=..." <%= uploads_url %></code></pre>
    
    <p>The value of <code>upload[key]</code> should be set to the value of
      <code>params[key]</code> from the upload session but with the 
      <code>${filename}</code> part replaced with the actual name of the
      uploaded file. In Ruby pseudo code that would be:</p>
    
    <pre><code>upload_session['params']['key'].gsub('${filename}', File.basename(uploaded_file))</code></pre>
    
    <h2>Importing from an URL</h2>
    <p>You can also import tracks directly from a publicly available URL.
      This is a lot simpler because you will not need an upload session and
      Bitspace will take care of downloading the track directly from the
      remote URL.</p>
    
    <p>Do a HTTP POST to the URL <code><%= import_uploads_url %></code> with a
    single parameter "url" set to the (HTTP/HTTPS) URL you want to import. You
    need to be logged in to Bitspace if using a HTML form or authenticate the
    request as a normal API request for the import to work.</p>

    <p>The response will be HTTP 200 Ok if successful or HTTP 403 Forbidden if
    you don't have enough space.</p>

    <p>In HTML that would look something like this:</p>
    
    <pre><code>&lt;form action=&quot;<%= import_uploads_url %>&quot; method=&quot;post&quot;&gt;
&lt;input type=&quot;hidden&quot; name=&quot;url&quot; value=&quot;http://.../example.mp3&quot; /&gt;
&lt;input type=&quot;submit&quot; value=&quot;Import file&quot; /&gt;
&lt;/form&gt;</code></pre>
    
    <p>Example with Curl:</p>
    
    <pre><code>curl -u username:password -d "url=http://.../example.mp3" \
  <%= import_uploads_url %></code></pre>
    
    <h2>Examples</h2>
    <ul>
      <li><strong><%= link_to('Upload all files from a directory', 'http://gist.github.com/321964', :class => 'external') %></strong> - A simple Ruby 
        script that uploads all .mp3 files in a specified directory.</li>
      <li><strong>Bookmarklet for importing an URL</strong> - A simple bookmarklet
        written in Javascript that will import the first linked .mp3 file on a page.</li>
    </ul>
  
  </div>
  
  <div class="grid_3">
    <%= render :partial => 'navigation' %>
  </div>
</div>